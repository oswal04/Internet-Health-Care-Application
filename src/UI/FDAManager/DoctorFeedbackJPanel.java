/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.FDAManager;

import Business.Drug.Drug;
import Business.Enterprise.Enterprise;
import Business.Enterprise.FDA;
import Business.Organization.FDAMgrOrganization;
import Business.Start.Ecosystem;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.Dr_FDAWorkRequest;
import Business.WorkRequest.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Chirag
 */
public class DoctorFeedbackJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorFeedbackJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private FDAMgrOrganization fDAMgrOrganization;
    private Ecosystem ecosystem;
    private Enterprise enterprise;
    private FDA fdaEnterprise;

    public DoctorFeedbackJPanel(JPanel userProcessContainer, UserAccount userAccount, FDAMgrOrganization organization, Enterprise e, Ecosystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.fDAMgrOrganization = organization;
        this.ecosystem = ecosystem;
        this.enterprise = e;
        this.fdaEnterprise = (FDA) e;
        populateReqTable();
        populateGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        feedbackjTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        graphpanel = new javax.swing.JPanel();
        backButton2 = new javax.swing.JButton();

        feedbackjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug Id", "Drug Name", "Message", "Sender", "Time Sent", "Received By", "Received On", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(feedbackjTable);

        jLabel1.setText("Doctor Feedbacks");

        jButton1.setText("Accept Feedback");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        graphpanel.setBackground(new java.awt.Color(255, 255, 255));
        graphpanel.setLayout(new java.awt.BorderLayout());

        backButton2.setText("<<Back");
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(graphpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(352, 352, 352)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(backButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(155, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 214, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(backButton2))
                .addGap(40, 40, 40)
                .addComponent(graphpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(83, 83, 83)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(295, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss  MMM/dd/yyyy");
        String resDate = (dateFormat.format(date));
        int selectedRow = feedbackjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select A Feedback!!!");
            return;
        }

        WorkRequest request = (WorkRequest) feedbackjTable.getValueAt(selectedRow, 1);
        Dr_FDAWorkRequest dfdawr = (Dr_FDAWorkRequest) request;
        dfdawr.setReceiver(userAccount);
        dfdawr.setResolveDate(resDate);
        dfdawr.setStatus("Feedback accepted");
        dfdawr.getDrug().setComplaintcount((dfdawr.getDrug().getComplaintcount())+1);
        populateReqTable();
        populateGraph();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton2;
    private javax.swing.JTable feedbackjTable;
    private javax.swing.JPanel graphpanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void populateReqTable() {
        DefaultTableModel model = (DefaultTableModel) feedbackjTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : fDAMgrOrganization.getWorkQueue().getWorkList()) {
            if (request instanceof Dr_FDAWorkRequest) {
                Dr_FDAWorkRequest dfdawr = (Dr_FDAWorkRequest) request;
                Object[] row = new Object[8];
                row[0] = dfdawr.getDrug().getDrugNo();
                row[1] = dfdawr;
                row[2] = dfdawr.getMessage();
                row[3] = dfdawr.getSender().getEmployee();
                row[4] = dfdawr.getRequestDate();
                row[5] = request.getReceiver() == null ? null : request.getReceiver().getEmployee();
                row[6] = request.getResolveDate() == null ? null : request.getResolveDate();
                row[7] = dfdawr.getStatus();

                model.addRow(row);
            }
        }
    }

    private void populateGraph() {

        DefaultCategoryDataset barchart = new DefaultCategoryDataset();
        for (Drug d : fdaEnterprise.getDrugCatalog().getDrugList()) {
            barchart.setValue(d.getComplaintcount(), "Feedback count", d.getMedicineName());

        }

        JFreeChart chart = ChartFactory.createBarChart("Complaint Chart", "Drug name ", "No of Complaints", barchart, PlotOrientation.VERTICAL, true, true, true);
        CategoryPlot cp = chart.getCategoryPlot();
        cp.setRangeGridlinePaint(Color.white);
        cp.setBackgroundPaint(Color.black);

        ChartPanel chartPanel = new ChartPanel(chart);
        graphpanel.removeAll();
        graphpanel.add(chartPanel, BorderLayout.CENTER);
        graphpanel.repaint();
        graphpanel.validate();
    }
}
