/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.HospitalDoctor;

import Business.Employee.Doctor;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.CityNetwork;
import Business.Network.Network;
import Business.Network.StateNetwork;
import Business.Organization.HospitalDoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Start.Ecosystem;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.Dr_DrWorkRequest;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chirag
 */
public class SearchPatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchPatientJPanel
     */
    private JPanel userProcessContainer;
    private HospitalDoctorOrganization hospitalDoctorOrganization;
    private Ecosystem ecosystem;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private PatientOrganization patientOrganization;

    public SearchPatientJPanel(JPanel userProcessContainer, UserAccount account, HospitalDoctorOrganization organization, Enterprise enterprise, Ecosystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.hospitalDoctorOrganization = organization;
        this.ecosystem = business;
        this.enterprise = enterprise;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchjTextField = new javax.swing.JTextField();
        searchjButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        reqjTable1 = new javax.swing.JTable();
        treatpatientjButton1 = new javax.swing.JButton();
        viewDetailsjButton = new javax.swing.JButton();
        backButton2 = new javax.swing.JButton();

        jLabel1.setText("Search Patient ");

        jLabel2.setText("Search by name:");

        searchjButton1.setText("Search & Send Request");
        searchjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchjButton1ActionPerformed(evt);
            }
        });

        reqjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Message", "Patient", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(reqjTable1);
        if (reqjTable1.getColumnModel().getColumnCount() > 0) {
            reqjTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        treatpatientjButton1.setText("Treat Patient");
        treatpatientjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treatpatientjButton1ActionPerformed(evt);
            }
        });

        viewDetailsjButton.setText("View Details");
        viewDetailsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsjButtonActionPerformed(evt);
            }
        });

        backButton2.setText("<<Back");
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(searchjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchjButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backButton2)
                                .addGap(418, 418, 418)
                                .addComponent(viewDetailsjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(treatpatientjButton1)))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchjButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(treatpatientjButton1)
                    .addComponent(viewDetailsjButton)
                    .addComponent(backButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(290, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchjButton1ActionPerformed
        // TODO add your handling code here:
        String name = searchjTextField.getText();
//        DefaultTableModel model = (DefaultTableModel) searchjtable.getModel();
//        model.setRowCount(0);
        for (Network n : ecosystem.getcountryNetworkList()) {
            for (StateNetwork sn : n.getStateNetworkList()) {
                for (CityNetwork cn : sn.getCityNetworkList()) {
                    for (Enterprise e : cn.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Hospital)) {
                            for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                                if (org instanceof HospitalDoctorOrganization) {
                                    for (Employee emp : org.getEmployeeDirectory().getEmployeeList()) {
                                        if (emp instanceof Doctor) {
                                            Doctor d = (Doctor) emp;
                                            for (Employee pat : d.getPatientDirectory().getPatientList()) {
                                                if (pat instanceof Patient) {
                                                    Patient patient = (Patient) pat;
                                                    if (patient.getFname().equalsIgnoreCase(name)) {
//checked for patient, second loop for getting doctor

                                                        Enterprise enterprise = e;
                                                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                                            if (organization instanceof HospitalDoctorOrganization) {
                                                                for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                                                                    if (ua.getEmployee().equals(patient.getDoctor())) {

                                                                        Dr_DrWorkRequest ddwr = new Dr_DrWorkRequest();
                                                                        ddwr.setSender(userAccount);
                                                                        ddwr.setReceiver(ua);
                                                                        ddwr.setMessage("Please send me details of: " + searchjTextField.getText());
                                                                        ddwr.setStatus("Request Sent");

                                                                        ua.getWorkQueue().getWorkList().add(ddwr);
                                                                        userAccount.getWorkQueue().getWorkList().add(ddwr);
                                                                        populateTable();
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        }//new code till here
                                    }

                                }
                            }
                        }
                    }
                }

            }
        }


    }//GEN-LAST:event_searchjButton1ActionPerformed

    private void treatpatientjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treatpatientjButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = reqjTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a record!!");
            return;
        }
        if (!(reqjTable1.getValueAt(selectedRow, 3) == null)) {
            TreatOutpatientJPanel panel = new TreatOutpatientJPanel(userProcessContainer, userAccount, hospitalDoctorOrganization, enterprise, (Patient) (reqjTable1.getValueAt(selectedRow, 3)), ecosystem);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("TreatOutPatientJPanel", panel);
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Response not received!!!");
        }
    }//GEN-LAST:event_treatpatientjButton1ActionPerformed

    private void backButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButton2ActionPerformed

    private void viewDetailsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = reqjTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a record!!");
            return;
        }
        if (!(reqjTable1.getValueAt(selectedRow, 3) == null)) {
            ViewOutPatientPastEncounterJPanel panel = new ViewOutPatientPastEncounterJPanel(userProcessContainer, (Patient) (reqjTable1.getValueAt(selectedRow, 3)));
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("ViewOutPatientPastEncounterJPanel", panel);
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Response not received!!!");
        }
    }//GEN-LAST:event_viewDetailsjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable reqjTable1;
    private javax.swing.JButton searchjButton1;
    private javax.swing.JTextField searchjTextField;
    private javax.swing.JButton treatpatientjButton1;
    private javax.swing.JButton viewDetailsjButton;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) reqjTable1.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : userAccount.getWorkQueue().getWorkList()) {
            if (wr instanceof Dr_DrWorkRequest) {

                Dr_DrWorkRequest ddwr = (Dr_DrWorkRequest) wr;
                if ((ddwr.getSender().equals(userAccount))) {
                    Object[] row = new Object[7];
                    row[0] = ddwr.getSender();
                    row[1] = ddwr.getReceiver();
                    row[2] = ddwr.getMessage();
                    if (ddwr.getPatient() != null) {
                        row[3] = ddwr.getPatient();
                    }
                    row[4] = ddwr.getStatus();

                    model.addRow(row);
                }
            }
        }
    }
}
//                                if (org instanceof HospitalDoctorOrganization) {
//                                    for (Employee emp : org.getEmployeeDirectory().getEmployeeList()) {
//                                        if (emp instanceof Doctor) {
//                                            Doctor d = (Doctor) emp;
//                                            for (Employee pat : d.getPatientDirectory().getPatientList()) {
//                                                if (pat instanceof Patient) {
//
//                                                    Patient patient = (Patient) pat;
//                                                    if (patient.getFname().equalsIgnoreCase(name)) {
//
//                                                        Object[] row = new Object[6];
//                                                        row[0] = patient;
//                                                        row[1] = patient.getPid();
//                                                        row[2] = d.getFname();
//                                                        row[3] = n + ">>" + sn + ">>" + cn;
//                                                        model.addRow(row);
//
//                                                    }
//                                 else
//                                            JOptionPane.showMessageDialog(null,"Patient not found!!!");
//                                                }
//                                            }
//                                        }
//
//                                    }
