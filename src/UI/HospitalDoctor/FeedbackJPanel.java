/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.HospitalDoctor;

import Business.Drug.Drug;
import Business.Enterprise.Enterprise;
import Business.Enterprise.FDA;
import Business.Network.CityNetwork;
import Business.Network.Network;
import Business.Network.StateNetwork;
import Business.Organization.FDAMgrOrganization;
import Business.Organization.HospitalDoctorOrganization;
import Business.Organization.Organization;
import Business.Start.Ecosystem;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.Dr_FDAWorkRequest;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chirag
 */
public class FeedbackJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FeedbackJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private HospitalDoctorOrganization hospitalDoctorOrganization;
    private Enterprise enterprise;
    private Ecosystem ecosystem;

    public FeedbackJPanel(JPanel userProcessContainer, UserAccount userAccount, HospitalDoctorOrganization hospitalDoctorOrganization, Enterprise enterprise, Ecosystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.userAccount = userAccount;
        this.hospitalDoctorOrganization = hospitalDoctorOrganization;
        this.enterprise = enterprise;
        populateTable();
        populateReqTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        druglistjTable = new javax.swing.JTable();
        backButton2 = new javax.swing.JButton();
        feedbackjButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        reqjTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        commentsjTextField = new javax.swing.JTextField();

        backButton3.setText("<<Back");
        backButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Feedback Panel");

        druglistjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug Id", "Medicine Name", "Manufacturer", "Approved On"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(druglistjTable);
        if (druglistjTable.getColumnModel().getColumnCount() > 0) {
            druglistjTable.getColumnModel().getColumn(0).setResizable(false);
            druglistjTable.getColumnModel().getColumn(1).setResizable(false);
            druglistjTable.getColumnModel().getColumn(3).setResizable(false);
        }

        backButton2.setText("<<Back");
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        feedbackjButton.setText("Send Feedback");
        feedbackjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackjButtonActionPerformed(evt);
            }
        });

        reqjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug ID", "Medicine name", "Message", "Sender", "Sent on", "Receiver", "Received on", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(reqjTable);
        if (reqjTable.getColumnModel().getColumnCount() > 0) {
            reqjTable.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel2.setText("Comments:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(jLabel1)
                .addContainerGap(356, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(commentsjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(feedbackjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(149, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feedbackjButton)
                    .addComponent(jLabel2)
                    .addComponent(commentsjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(backButton2)
                .addContainerGap(123, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButton2ActionPerformed

    private void backButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButton3ActionPerformed

    private void feedbackjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackjButtonActionPerformed
        // TODO add your handling code here:
        Dr_FDAWorkRequest drfda = new Dr_FDAWorkRequest();
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss  MMM/dd/yyyy");
        String reqDate = (dateFormat.format(date));

        int selectedRow = druglistjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please choose a drug");
            return;

        }
        Drug d = (Drug) druglistjTable.getValueAt(selectedRow, 1);
       
        drfda.setDrug(d);
    
        drfda.setMessage(commentsjTextField.getText());
        drfda.setSender(userAccount);
        drfda.setRequestDate(reqDate);
        drfda.setResolveDate(null);
        drfda.setStatus("Sent to FDA");

        Organization org = null;
        for (Network n : ecosystem.getcountryNetworkList()) {
            for (StateNetwork sn : n.getStateNetworkList()) {
                for (CityNetwork cn : sn.getCityNetworkList()) {
                    for (Enterprise e : cn.getEnterpriseDirectory().getEnterpriseList()) {
                        for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                            //System.out.println(organization);
                            if (organization instanceof FDAMgrOrganization) {

                                org = organization;
                            }
                        }
                    }
                }
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkList().add(drfda);
            userAccount.getWorkQueue().getWorkList().add(drfda);
        }

        populateReqTable();
    }//GEN-LAST:event_feedbackjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton2;
    private javax.swing.JButton backButton3;
    private javax.swing.JTextField commentsjTextField;
    private javax.swing.JTable druglistjTable;
    private javax.swing.JButton feedbackjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable reqjTable;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        FDA fda;
        DefaultTableModel model = (DefaultTableModel) druglistjTable.getModel();
        model.setRowCount(0);
        for (Network n : ecosystem.getcountryNetworkList()) {
            for (StateNetwork sn : n.getStateNetworkList()) {
                for (CityNetwork cn : sn.getCityNetworkList()) {
                    for (Enterprise e : cn.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e instanceof FDA) {
                            fda = (FDA) e;
                            for (Drug d : fda.getDrugCatalog().getDrugList()) {
                                Object[] row = new Object[6];
                                row[0] = d.getDrugNo();
                                row[1] = d;
                                row[2] = d.getManufacturer();
                                row[3] = d.getApprovedOn();

                                model.addRow(row);

                            }

                        }
                    }
                }
            }
        }
    }

    private void populateReqTable() {
        DefaultTableModel model = (DefaultTableModel) reqjTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkList()) {
            //System.out.println(request);
            if (request instanceof Dr_FDAWorkRequest) {
                Dr_FDAWorkRequest dfdawr = (Dr_FDAWorkRequest) request;

                Object[] row = new Object[10];
                row[0] = dfdawr.getDrug().getDrugNo();
                row[1] = dfdawr;
                row[2] = dfdawr.getMessage();
                row[3] = dfdawr.getSender();
                row[4] = dfdawr.getRequestDate();
                row[5] = dfdawr.getReceiver();
                row[6] = dfdawr.getResolveDate();
                row[7] = dfdawr.getStatus();
                model.addRow(row);

            }
        }
    }
}
