/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.HospitalDoctor;

import Business.Employee.Doctor;
import Business.Enterprise.Enterprise;
import Business.Organization.HospitalDoctorOrganization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Start.Ecosystem;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.Dr_DrWorkRequest;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chirag
 */
public class ViewDrReqJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewDrReqJPanel
     */
    private JPanel userProcessContainer;
    private HospitalDoctorOrganization hospitalDoctorOrganization;
    private Ecosystem ecosystem;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private PatientOrganization patientOrganization;

    public ViewDrReqJPanel(JPanel userProcessContainer, UserAccount account, HospitalDoctorOrganization organization, Enterprise enterprise, Ecosystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.hospitalDoctorOrganization = organization;
        this.enterprise = enterprise;
        this.ecosystem = business;
        populateRequestTable();
        populatePatientCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        patientjComboBox1 = new javax.swing.JComboBox();
        SendpatientjButton1 = new javax.swing.JButton();
        backButton3 = new javax.swing.JButton();

        jLabel1.setText("View Doctor Request");

        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Message", "Patient", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestJTable);

        patientjComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        SendpatientjButton1.setText("Send details");
        SendpatientjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendpatientjButton1ActionPerformed(evt);
            }
        });

        backButton3.setText("<<Back");
        backButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(patientjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SendpatientjButton1)
                        .addGap(40, 40, 40)
                        .addComponent(backButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendpatientjButton1)
                    .addComponent(backButton3))
                .addContainerGap(147, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SendpatientjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendpatientjButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a record!!");
            return;
        }
        Patient p = (Patient) patientjComboBox1.getSelectedItem();
        Dr_DrWorkRequest ddwr = (Dr_DrWorkRequest) requestJTable.getValueAt(selectedRow, 3);
        ddwr.setPatient(p);
        ddwr.setStatus("Patient Sent!!");
        populateRequestTable();
    }//GEN-LAST:event_SendpatientjButton1ActionPerformed

    private void backButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton3ActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SendpatientjButton1;
    private javax.swing.JButton backButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox patientjComboBox1;
    private javax.swing.JTable requestJTable;
    // End of variables declaration//GEN-END:variables

    private void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) requestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : userAccount.getWorkQueue().getWorkList()) {
            if (wr instanceof Dr_DrWorkRequest) {
                Dr_DrWorkRequest ddwr = (Dr_DrWorkRequest) wr;
                {
                    if (!(ddwr.getSender().equals(userAccount))) {
                        Object[] row = new Object[7];
                        row[0] = ddwr.getSender();
                        row[1] = ddwr.getReceiver();
                        row[2] = ddwr.getMessage();
                        row[3] = ddwr;
                        row[4] = ddwr.getStatus();

                        model.addRow(row);
                    }
                }
            }
        }

    }

    private void populatePatientCombobox() {
        patientjComboBox1.removeAllItems();
        Doctor d = (Doctor) userAccount.getEmployee();
        for (Patient p : d.getPatientDirectory().getPatientList()) {
            patientjComboBox1.addItem(p);
        }

    }
}
